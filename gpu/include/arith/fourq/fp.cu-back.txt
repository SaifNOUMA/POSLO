
__device__ __constant__ uint64_t d_curve_order[4]       = { 0x2FB2540EC7768CE7, 0xDFBD004DFE0F7999, 0xF05397829CBC14E5, 0x0029CBC14E5E0A72 };
__device__ __constant__ uint64_t d_Montgomery_Rprime[4] = { 0xC81DB8795FF3D621, 0x173EA5AAEA6B387D, 0x3D01B7C72136F61C, 0x0006A5F16AC8F9D3 };
__device__ __constant__ uint64_t d_Montgomery_rprime[4] = { 0xE12FE5F079BC3929, 0xD75E78B8D1FCDCF3, 0xBCE409ED76B5DB21, 0xF32702FDAFC1C074 };

__device__ __forceinline__ void d_digit_x_digit(digit_t a, digit_t b, digit_t* c)
{ // Digit multiplication, digit * digit -> 2-digit result    
    digit_t al, ah, bl, bh, temp;
    digit_t albl, albh, ahbl, ahbh, res1, res2, res3, carry;
    digit_t mask_low = (digit_t)(-1) >> (sizeof(digit_t)*4), mask_high = (digit_t)(-1) << (sizeof(digit_t)*4);

    al = a & mask_low;                        // Low part
    ah = a >> (sizeof(digit_t) * 4);          // High part
    bl = b & mask_low;
    bh = b >> (sizeof(digit_t) * 4);

    albl = al*bl;
    albh = al*bh;
    ahbl = ah*bl;
    ahbh = ah*bh;
    c[0] = albl & mask_low;                   // C00

    res1 = albl >> (sizeof(digit_t) * 4);
    res2 = ahbl & mask_low;
    res3 = albh & mask_low;  
    temp = res1 + res2 + res3;
    carry = temp >> (sizeof(digit_t) * 4);
    c[0] ^= temp << (sizeof(digit_t) * 4);    // C01   

    res1 = ahbl >> (sizeof(digit_t) * 4);
    res2 = albh >> (sizeof(digit_t) * 4);
    res3 = ahbh & mask_low;
    temp = res1 + res2 + res3 + carry;
    c[1] = temp & mask_low;                   // C10 
    carry = temp & mask_high; 
    c[1] ^= (ahbh & mask_high) + carry;       // C11
}

__device__ __forceinline__ void d_mp_mul(const digit_t* a, const digit_t* b, digit_t* c, const unsigned int nwords)
{ // Schoolbook multiprecision multiply, c = a*b   
    unsigned int i, j;
    digit_t u, v, UV[2];
    unsigned int carry = 0;

     for (i = 0; i < (2*nwords); i++) c[i] = 0;

     for (i = 0; i < nwords; i++) {
          u = 0;
          for (j = 0; j < nwords; j++) {
            D_MUL(a[i], b[j], UV+1, UV[0]); 
            D_ADDC(0, UV[0], u, carry, v); 
            u = UV[1] + carry;
            D_ADDC(0, c[i+j], v, carry, v); 
            u = u + carry;
            c[i+j] = v;
          }
          c[nwords+i] = u;
     }
}

__device__ __forceinline__ unsigned int d_mp_add(digit_t* a, digit_t* b, digit_t* c, unsigned int nwords)
{ // Multiprecision addition, c = a+b, where lng(a) = lng(b) = nwords. Returns the carry bit 
    unsigned int i, carry = 0;

    for (i = 0; i < nwords; i++) {
        D_ADDC(carry, a[i], b[i], carry, c[i]);
    }
    
    return carry;
}

__device__ __forceinline__ unsigned int d_mp_add_ptx(digit_t* a, digit_t* b, digit_t* c, unsigned int nwords)
{ // Multiprecision addition, c = a+b, where lng(a) = lng(b) = nwords. Returns the carry bit 
    digit_t carry;

    asm volatile ("add.cc.u64 %0, %1, %2;" : "=l"(c[0]) : "l"(a[0]), "l"(b[0]) );

    for (int i = 1; i < nwords; i++) {
        asm volatile ("addc.cc.u64 %0, %1, %2;" : "=l"(c[i]) : "l"(a[i]), "l"(b[i]) );
    }
    asm volatile ("addc.u64 %0, 0, 0;" : "=l"(carry) );
    
    return carry;
}

__device__ static __forceinline__ void d_multiply(const digit_t* a, const digit_t* b, digit_t* c)
{ // Schoolbook multiprecision multiply, c = a*b 

    d_mp_mul(a, b, c, NWORDS_ORDER);
}

__device__ __forceinline__ unsigned char d_subtract(const digit_t* a, const digit_t* b, digit_t* c, const unsigned int nwords)
{ // Multiprecision subtraction, c = a-b. Returns the borrow bit 
    // unsigned int i;
    // unsigned char borrow = 0;

    // for (i = 0; i < nwords; i++) {
    //     D_SUBC(borrow, a[i], b[i], borrow, c[i]);
    // }

    // return borrow;

    digit_t carry;

    asm volatile ("sub.cc.u64 %0, %1, %2;" : "=l"(c[0]) : "l"(a[0]), "l"(b[0]) );

    for (int i = 1; i < nwords; i++) {
        asm volatile ("subc.cc.u64 %0, %1, %2;" : "=l"(c[i]) : "l"(a[i]), "l"(b[i]) );
    }
    asm volatile ("subc.u64 %0, 0, 0;" : "=l"(carry) );
    
    return carry;
}   

__device__ static __forceinline__ unsigned int d_add_ptx(const digit_t* a, const digit_t* b, digit_t* c, const unsigned int nwords)
{ // Multiprecision addition, c = a+b, where lng(a) = lng(b) = nwords. Returns the carry bit 
    
    return d_mp_add_ptx((digit_t*)a, (digit_t*)b, c, (unsigned int)nwords);
}

__device__ static __forceinline__ unsigned int d_add(const digit_t* a, const digit_t* b, digit_t* c, const unsigned int nwords)
{ // Multiprecision addition, c = a+b, where lng(a) = lng(b) = nwords. Returns the carry bit 
    
    return d_mp_add((digit_t*)a, (digit_t*)b, c, (unsigned int)nwords);
}

__device__ __forceinline__ void d_subtract_mod_order(const digit_t* a, const digit_t* b, digit_t* c)
{ // Subtraction modulo the curve order, c = a-b mod order
	digit_t mask, carry = 0;
	digit_t* order = (digit_t*)d_curve_order;
	unsigned int i, bout;

	bout = d_subtract(a, b, c, NWORDS_ORDER);            // (bout, c) = a - b
	mask = 0 - (digit_t)bout;                          // if bout = 0 then mask = 0x00..0, else if bout = 1 then mask = 0xFF..F

	for (i = 0; i < NWORDS_ORDER; i++) {               // c = c + (mask & order)
		D_ADDC(carry, c[i], mask & order[i], carry, c[i]);
	}
}

__device__ __forceinline__ void d_add_mod_order(const digit_t* a, const digit_t* b, digit_t* c)
{ // Addition modulo the curve order, c = a+b mod order

	d_add_ptx(a, b, c, NWORDS_ORDER);                        // c = a + b
	d_subtract_mod_order(c, (digit_t*)&d_curve_order, c);  // if c >= order then c = c - order
}

__device__ __forceinline__ void d_Montgomery_multiply_mod_order(const digit_t* ma, const digit_t* mb, digit_t* mc)
{ // 256-bit Montgomery multiplication modulo the curve order, mc = ma*mb*r' mod order, where ma,mb,mc in [0, order-1]
  // ma, mb and mc are assumed to be in Montgomery representation
  // The Montgomery constant r' = -r^(-1) mod 2^(log_2(r)) is the global value "d_Montgomery_rprime", where r is the order   
	unsigned int i;
	digit_t mask, P[2 * NWORDS_ORDER], Q[2 * NWORDS_ORDER], temp[2 * NWORDS_ORDER];
	digit_t* order = (digit_t*)d_curve_order;
	unsigned int cout = 0, bout = 0;

	d_multiply(ma, mb, P);                               // P = ma * mb
	d_multiply(P, (digit_t*)&d_Montgomery_rprime, Q);      // Q = P * r' mod 2^(log_2(r))
	d_multiply(Q, (digit_t*)&d_curve_order, temp);         // temp = Q * r
	cout = d_add_ptx(P, temp, temp, 2 * NWORDS_ORDER);         // (cout, temp) = P + Q * r     

	for (i = 0; i < NWORDS_ORDER; i++) {               // (cout, mc) = (P + Q * r)/2^(log_2(r))
		mc[i] = temp[NWORDS_ORDER + i];
	}

	// Final, constant-time subtraction     
	bout = d_subtract(mc, (digit_t*)&d_curve_order, mc, NWORDS_ORDER);    // (cout, mc) = (cout, mc) - r
	mask = (digit_t)cout - (digit_t)bout;              // if (cout, mc) >= 0 then mask = 0x00..0, else if (cout, mc) < 0 then mask = 0xFF..F

	for (i = 0; i < NWORDS_ORDER; i++) {               // temp = mask & r
		temp[i] = (order[i] & mask);
	}
	d_add_ptx(mc, temp, mc, NWORDS_ORDER);                   //  mc = mc + (mask & r)

	return;
}

__device__ __forceinline__ void d_modulo_order(digit_t* a, digit_t* c)
{ // Reduction modulo the order using Montgomery arithmetic
  // ma = a*d_Montgomery_Rprime mod r, where a,ma in [0, r-1], a,ma,r < 2^256
  // c = ma*1*d_Montgomery_Rprime^(-1) mod r, where ma,c in [0, r-1], ma,c,r < 2^256
	digit_t ma[NWORDS_ORDER], one[NWORDS_ORDER] = { 0 };

	one[0] = 1;
	d_Montgomery_multiply_mod_order(a, (digit_t*)&d_Montgomery_Rprime, ma);
	d_Montgomery_multiply_mod_order(ma, one, c);
}



            // if (blockIdx.x == 0 && tid == 0) {
            //     digit_t a[4], b[4], c[4], d[4];
            //     memcpy(a, (digit_t*) (e_sm+tid*ORDER_SIZE), 4*sizeof(digit_t));
            //     memcpy(b, (digit_t*) (e_sm+(tid+iter)*ORDER_SIZE), 4*sizeof(digit_t));

            //     d_add_mod_order(a, b, c);
            //     digit_t carry = 0;

            //     asm volatile (
            //         "add.cc.u64 %0, %5, %6;"
            //         "addc.cc.u64 %1, %7, %8;"
            //         "addc.cc.u64 %2, %9, %10;"
            //         "addc.u64 %3, %11, %12;"
            //         "addc.u64 %4, 0, 0;"
            //         : "=l"(d[0]), "=l"(d[1]), "=l"(d[2]), "=l"(d[3]), "=l"(carry)
            //         : "l"(a[0]), "l"(b[0]), "l"(a[1]), "l"(b[1]), "l"(a[2]), "l"(b[2]), "l"(a[3]), "l"(b[3]) 
            //     );

            //     bool ok = 1;
            //     for (int i = 0 ; i < 4 ; i++) {
            //         if (c[i] != d[i]) {
            //             printf("iter = %d, tid = %d\n", iter, tid);
            //             print_digit("a= ", a);
            //             print_digit("b= ", b);
            //             print_digit("c= ", c);
            //             print_digit("d= ", d);
            //             ok = 0;
            //             break;
            //             // printf("c[%d] = %lx\n", i, c[i]);
            //             // printf("d[%d] = %lx\n", i, d[i]);
            //         }
            //     }
            //     if (ok) {
            //         printf("OK [iter] = %lx\n", iter, carry);
            //     }

            // }




            
            if (blockIdx.x == 0 && tid == 0 & iter == 1) {
                digit_t a[4], b[4], c[4], d[4];
                memcpy(a, (digit_t*) (e_sm+tid*ORDER_SIZE), 4*sizeof(digit_t));
                memcpy(b, (digit_t*) (e_sm+(tid+iter)*ORDER_SIZE), 4*sizeof(digit_t));

                // u32 borrow_c = d_subtract(a, b, c, NWORDS_ORDER);
                // digit_t carry = 0;

                memset(c, 0, 4*sizeof(digit_t));
                D_MUL(a[0],b[0],c[1], c[0]);

                memset(d, 0, 4*sizeof(digit_t));
                asm volatile ("mul.lo.u64 %0, %1, %2;" : "=l"(d[0]) : "l"(a[0]), "l"(b[0]));
                asm volatile ("mul.hi.u64 %0, %1, %2;" : "=l"(d[1]) : "l"(a[0]), "l"(b[0]));

                print_digit("a= ", a, 1);
                print_digit("b= ", b, 1);
                print_digit("c= ", c, 2);
                print_digit("c= ", d, 2);

                // bool ok = 1;
                // for (int i = 0 ; i < 4 ; i++) {
                //     if (c[i] != d[i]) {
                //         printf("iter = %d, tid = %d\n", iter, tid);
                //         print_digit("a= ", a);
                //         print_digit("b= ", b);
                //         print_digit("c= ", c);
                //         print_digit("d= ", d);
                //         ok = 0;
                //         break;
                //         // printf("c[%d] = %lx\n", i, c[i]);
                //         // printf("d[%d] = %lx\n", i, d[i]);
                //     }
                // }
                // if (ok) {
                //     // printf("OK [iter] = %lx\n", iter, carry);
                //     // printf("borrow_c = %d\n", borrow_c);
                //     // printf("borrow_d = %d\n", borrow_d);
                // }

            }



            __device__ __forceinline__ unsigned int d_mp_add_ptx(digit_t* a, digit_t* b, digit_t* c, unsigned int nwords)
{ // Multiprecision addition, c = a+b, where lng(a) = lng(b) = nwords. Returns the carry bit 
    digit_t carry;

    asm volatile (
                    "add.cc.u64 %0, %5, %6;"
                    "addc.cc.u64 %1, %7, %8;"
                    "addc.cc.u64 %2, %9, %10;"
                    "addc.cc.u64 %3, %11, %12;"
                    "addc.u64 %4, 0, 0;"
                    : "=l"(c[0]), "=l"(c[1]), "=l"(c[2]), "=l"(c[3]), "=l"(carry)
                    : "l"(a[0]), "l"(b[0]), "l"(a[1]), "l"(b[1]), "l"(a[2]), "l"(b[2]), "l"(a[3]), "l"(b[3]) 
                );
    
    return carry;
}